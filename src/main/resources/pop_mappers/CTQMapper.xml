<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.compact.base.domain.CTQ.CTQMapper">
    <select id="getList" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT ROW_NUMBER() OVER (ORDER BY A.UPDATETIME ASC) AS ROWIDX,
    		   ORDER_NO, 
		       TO_CHAR(A.CREATE_DTTM, 'YYYY-MM-DD') AS CREATE_DTTM,
		       A.DIV, TEST_CODE, ITEM_NAME, TRAY_NO, EQUIP, 
		       B.MIN_VALUE, B.MAX_VALUE, A.AVG_VALUE,
		       VALUE1, VALUE2, VALUE3, VALUE4, VALUE5,
		       VALUE6, VALUE7, VALUE8, VALUE9, VALUE10,
		       VALUE11, VALUE12, VALUE13, VALUE14, VALUE15,
		       VALUE16, VALUE17, VALUE18, VALUE19, VALUE20
		FROM POP_TB_TEST_PULL_HISTORY A, POP_TB_TEST_PULL_STANDARD B
		WHERE A.ITEM_CODE = '6300156L'
		  AND A.PROVISION = '007'
		  AND TO_CHAR(A.UPDATETIME, 'YYYYMMDD') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')
		  AND A.ITEM_CODE = B.ITEM_CODE
		  AND A.PROVISION = B.PROVISION
		  AND A.DIV = B.DIV
		  AND A.LOCATE = B.LOCATE
		  AND A.CHIP_NAME = B.CHIP_NAME
		ORDER BY A.UPDATETIME ASC
    </select>
    <select id="getCTQData" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT 
	       --ROW_NUMBER() OVER (ORDER BY A.UPDATETIME ASC) AS ROWIDX,
	       TO_CHAR(A.CREATE_DTTM, 'MMDD') AS CTQ_DATE,
	       #{itemGroup} AS ITEM_GROUP, A.ITEM_CODE, ITEM_NAME,
	       ITEM1, ITEM2, 
	       A.CHIP_NAME, EQUIP, 
	       B.MIN_VALUE, B.MAX_VALUE, A.AVG_VALUE,
	       DECODE(VALUE1, 0, NULL, VALUE1) AS VALUE1,
	       DECODE(VALUE2, 0, NULL, VALUE2) AS VALUE2,
	       DECODE(VALUE3, 0, NULL, VALUE3) AS VALUE3,
	       DECODE(VALUE4, 0, NULL, VALUE4) AS VALUE4,
	       DECODE(VALUE5, 0, NULL, VALUE5) AS VALUE5,
	       DECODE(VALUE6, 0, NULL, VALUE6) AS VALUE6,
	       DECODE(VALUE7, 0, NULL, VALUE7) AS VALUE7,
	       DECODE(VALUE8, 0, NULL, VALUE8) AS VALUE8,
	       DECODE(VALUE9, 0, NULL, VALUE9) AS VALUE9,
	       DECODE(VALUE10, 0, NULL, VALUE10) AS VALUE10,
	       DECODE(VALUE11, 0, NULL, VALUE11) AS VALUE11,
	       DECODE(VALUE12, 0, NULL, VALUE12) AS VALUE12,
	       DECODE(VALUE13, 0, NULL, VALUE13) AS VALUE13,
	       DECODE(VALUE14, 0, NULL, VALUE14) AS VALUE14,
	       DECODE(VALUE15, 0, NULL, VALUE15) AS VALUE15,
	       DECODE(VALUE16, 0, NULL, VALUE16) AS VALUE16,
	       DECODE(VALUE17, 0, NULL, VALUE17) AS VALUE17,
	       DECODE(VALUE18, 0, NULL, VALUE18) AS VALUE18,
	       DECODE(VALUE19, 0, NULL, VALUE19) AS VALUE19,
	       DECODE(VALUE20, 0, NULL, VALUE20) AS VALUE20,
	       <![CDATA[
	       CASE 
	        WHEN B.MIN_VALUE IS NULL AND B.MAX_VALUE IS NULL THEN 
	            NULL
	        WHEN B.MIN_VALUE IS NOT NULL AND B.MAX_VALUE IS NULL THEN 
	            CASE 
	                WHEN B.MIN_VALUE < VALUE1 THEN 'NG VALUE1 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE2 THEN 'NG VALUE2 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE3 THEN 'NG VALUE3 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE4 THEN 'NG VALUE4 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE5 THEN 'NG VALUE5 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE6 THEN 'NG VALUE6 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE7 THEN 'NG VALUE7 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE8 THEN 'NG VALUE8 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE9 THEN 'NG VALUE9 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE10 THEN 'NG VALUE10 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE11 THEN 'NG VALUE11 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE12 THEN 'NG VALUE12 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE13 THEN 'NG VALUE13 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE14 THEN 'NG VALUE14 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE15 THEN 'NG VALUE15 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE16 THEN 'NG VALUE16 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE17 THEN 'NG VALUE17 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE18 THEN 'NG VALUE18 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE19 THEN 'NG VALUE19 LESS MIN VALUE'
	                WHEN B.MIN_VALUE < VALUE20 THEN 'NG VALUE20 LESS MIN VALUE'
	            END
	        WHEN B.MIN_VALUE IS NULL AND B.MAX_VALUE IS NOT NULL THEN
	            CASE 
	                WHEN B.MAX_VALUE < VALUE1 THEN 'NG VALUE1 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE2 THEN 'NG VALUE2 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE3 THEN 'NG VALUE3 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE4 THEN 'NG VALUE4 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE5 THEN 'NG VALUE5 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE6 THEN 'NG VALUE6 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE7 THEN 'NG VALUE7 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE8 THEN 'NG VALUE8 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE9 THEN 'NG VALUE9 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE10 THEN 'NG VALUE10 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE11 THEN 'NG VALUE11 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE12 THEN 'NG VALUE12 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE13 THEN 'NG VALUE13 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE14 THEN 'NG VALUE14 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE15 THEN 'NG VALUE15 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE16 THEN 'NG VALUE16 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE17 THEN 'NG VALUE17 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE18 THEN 'NG VALUE18 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE19 THEN 'NG VALUE19 OVER MAX VALUE'
	                WHEN B.MAX_VALUE < VALUE20 THEN 'NG VALUE20 OVER MAX VALUE'
	            END
	       END AS NG
	       ]]> 
			FROM POP_TB_TEST_PULL_HISTORY A, POP_TB_TEST_PULL_STANDARD B
		WHERE A.PROVISION = #{testProv}
		  AND A.ITEM_CODE IN (SELECT DISTINCT PRODUCTSPECNAME FROM POP_PRODUCTSPEC WHERE PRODUCTSPECGROUP = #{itemGroup})
		  <if test="itemCode != null and itemCode != ''">
			AND A.ITEM_CODE = #{itemCode}
		  </if>
		  AND TO_CHAR(A.CREATE_DTTM, 'YYYYMMDDHH24MISS') BETWEEN REPLACE(#{startDate}, '-', '') AND REPLACE(#{endDate}, '-', '')
		  AND A.ITEM_CODE = B.ITEM_CODE
		  AND A.PROVISION = B.PROVISION
		  AND A.LOCATE = B.LOCATE
		  AND A.CHIP_NAME = B.CHIP_NAME
		ORDER BY A.UPDATETIME ASC
    </select>
    <select id="getItemGroup" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT DISTINCT PRODUCTSPECGROUP AS ITEM_GROUP
		FROM POP_PRODUCTSPEC A, POP_TB_TEST_PULL_HISTORY B
		WHERE B.PROVISION IN ('007', '022')
		  AND TO_CHAR (B.CREATE_DTTM, 'YYYYMMDD') BETWEEN REPLACE(#{startDate}, '-', '') AND REPLACE(#{endDate}, '-', '')
		  AND A.PRODUCTSPECNAME = B.ITEM_CODE
		ORDER BY 1  
    </select>
    <select id="getItemCode" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT DISTINCT ITEM_CODE || '(' || ITEM_NAME || ')' AS DESCR, ITEM_CODE
		FROM POP_TB_TEST_PULL_HISTORY
		WHERE PROVISION IN ('007', '022')
		  AND TO_CHAR(CREATE_DTTM, 'YYYYMMDD') BETWEEN REPLACE(#{startDate}, '-', '') AND REPLACE(#{endDate}, '-', '')
		  AND ITEM_CODE IN (SELECT PRODUCTSPECNAME FROM POP_PRODUCTSPEC WHERE PRODUCTSPECGROUP = #{itemGroup})
		ORDER BY ITEM_CODE
    </select>
    <select id="getTestProvCode" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT VALUE2 AS DESCR, VALUE1 AS CODE
		FROM TB_CODE_LIST@POPDB
		WHERE GROUP_CODE = 'TEST_PROV'
		  AND VALUE1 IN ('007', '022')
		  AND VALUE1 IN 
		  			(SELECT DISTINCT PROVISION 
		  			 FROM POP_TB_TEST_PULL_HISTORY 
		  			 WHERE TO_CHAR(CREATE_DTTM, 'YYYYMMDD') BETWEEN REPLACE(#{startDate}, '-', '') AND REPLACE(#{endDate}, '-', '') 
		  			 AND PROVISION IN ('007', '022'))
    </select>
    <insert id="addMailImage" parameterType="hashmap" statementType="PREPARED">
    	INSERT INTO SPC_CTQ_MAIL_IMG (MAIL_NO, START_DATE, END_DATE, TEST_PROV, ITEM_GROUP, ITEM_CODE, FILE_NAME)
    	VALUES (#{mailNo}, #{start}, #{end}, #{testProv}, #{itemGroup}, #{itemCode}, #{fileName})
    </insert>
    <select id="getCommonCode" parameterType="hashmap" resultType="camelmap" statementType="PREPARED">
    	SELECT GROUPCODE, CODE, VALUE, SEQ, VALUE1, VALUE2
    	FROM CTQ_COMMON
    	WHERE USE = 'Y'
    	  AND DEL = 'N'
    	  AND GROUPCODE = #{groupCode}
    	ORDER BY SEQ
    </select>
    <insert id="addMailTemplete" parameterType="hashmap" statementType="PREPARED">
    	INSERT INTO CTQ_MAIL_TMPL (MAIL_DATE, SEND_YN, MAIL_BODY, UPDATEDATE, UPDATEUSER)
    	VALUES (#{mailDate}, 'N', #{mailBody}, SYSDATE, 'YMS-Mailer')
    </insert>
</mapper>